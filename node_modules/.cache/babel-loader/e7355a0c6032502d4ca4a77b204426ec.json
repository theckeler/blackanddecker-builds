{"ast":null,"code":"/**\n * @remix-run/router v1.0.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(location) {\n      return location;\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      let url = createURL(createPath(location));\n      return _extends({}, location, {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      });\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = init.history.encodeLocation(location);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request) {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n\n\n  async function queryRoute(request, routeId) {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\"\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\"\n        });\n      }\n\n      result = getMethodNotAllowedResult(request.url);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, undefined, // Basename not currently supported in static handlers\n      true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, undefined, // Basename not currently supported in static handlers\n    true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function createRouterErrorResponse(body, init) {\n    return new Response(body, _extends({}, init, {\n      headers: _extends({}, init.headers, {\n        \"X-Remix-Router-Error\": \"yes\"\n      })\n    }));\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status; // Process redirects\n\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in redirects\n\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + result.headers.get(\"Location\")); // Prepend the basename to the redirect location if we have one\n\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation); // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes, status, statusText) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-\" + status + \"-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(status, statusText, null)\n  };\n}\n\nfunction getNotFoundMatches(routes) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result) {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && obj.response instanceof Response && (obj.type === ResultType.data || ResultType.error);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","createURL","origin","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","fetchMatches","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","validActionMethods","validRequestMethods","unstable_createStaticHandler","query","method","methodNotAllowedMatches","getMethodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","queryRoute","createRouterErrorResponse","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","type","isRedirectResponse","response","isRouteRequest","Location","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","body","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","requestPath","resolvedLocation","contentType","text","deferred","toUpperCase","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","getShortCircuitMatches","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["/router/history.ts","/router/utils.ts","/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLAC e navigations for data routers\n   * behave the same as POP\n   *\n   * @param location The incoming location from router.navigate()\n   */\n  encodeLocation(location: Location): Location;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(location) {\n      return location;\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      let url = createURL(createPath(location));\n      return {\n        ...location,\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createURL,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = init.history.encodeLocation(location);\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(request.url);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}